/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Interfaz.java
 *
 * 
 */

package sudoku;

import sudoku.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import javax.swing.JFileChooser;

/**
 *
 * @author mireia
 */
public class Interfaz extends javax.swing.JFrame {

    //Indica si está cargado un sudoku
    boolean sudoku;
    //Indica si se ha seleccionado una casilla
    boolean seleccion;
    //Indica la fila y columna de la casilla seleccionada
    int fila;
    int columna;
    //Contiene el tablero de juego
    Tablero m_nuevoTablero;
    //Crea un jugador que es quien resuelve el sudoku, quien contiene la función FC
    Jugador jugador;


    /** Creates new form Interfaz */
    public Interfaz(Tablero tablero) {
        //Inicializa las variables del juego
        sudoku = false;
        jugador = new Jugador();
        m_nuevoTablero = tablero;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jFileChooser1 = new javax.swing.JFileChooser();
        jPanelTab = new javax.swing.JPanel();
        jPanelNum = new javax.swing.JPanel();
        jButBack = new javax.swing.JButton();
        jButFC = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Práctica SISTEMAS INTELIGENTES. SUDOKU");
        setResizable(false);

        jPanelTab.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanelTab.setForeground(new java.awt.Color(255, 255, 255));
        jPanelTab.setPreferredSize(new java.awt.Dimension(315, 315));
        jPanelTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelTabMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelTabLayout = new org.jdesktop.layout.GroupLayout(jPanelTab);
        jPanelTab.setLayout(jPanelTabLayout);
        jPanelTabLayout.setHorizontalGroup(
            jPanelTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 311, Short.MAX_VALUE)
        );
        jPanelTabLayout.setVerticalGroup(
            jPanelTabLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 311, Short.MAX_VALUE)
        );

        jPanelNum.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanelNum.setForeground(new java.awt.Color(255, 255, 255));
        jPanelNum.setPreferredSize(new java.awt.Dimension(105, 105));
        jPanelNum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanelNumMouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelNumLayout = new org.jdesktop.layout.GroupLayout(jPanelNum);
        jPanelNum.setLayout(jPanelNumLayout);
        jPanelNumLayout.setHorizontalGroup(
            jPanelNumLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 101, Short.MAX_VALUE)
        );
        jPanelNumLayout.setVerticalGroup(
            jPanelNumLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 101, Short.MAX_VALUE)
        );

        jButBack.setText("Comprobar");
        jButBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButBackActionPerformed(evt);
            }
        });

        jButFC.setText("Backtracking");
        jButFC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButFCActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel1.setPreferredSize(new java.awt.Dimension(35, 35));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 31, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 31, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText(" ");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jButton1.setText("AC3");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");

        jMenuItem1.setText("Cargar Sudoku");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Borrar Sudoku");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelTab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(38, 38, 38)
                        .add(jPanelNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 30, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButBack, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButton1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jButFC, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanelNum, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(31, 31, 31)
                        .add(jButFC)
                        .add(18, 18, 18)
                        .add(jButton1)
                        .add(29, 29, 29)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jButBack, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 29, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanelTab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Botón Backtracking de la interfaz
     * Llama a la función que resuelve el sudoku por BC y comprueba si la solución es correcta
     * @param evt
     */
    private void jButFCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButFCActionPerformed
        // TODO add your handling code here:
        //Llama a la función ejecutarBC de la clase Jugador
        jugador.ejecutarBC(m_nuevoTablero);
        repaint();

        //Comprueba si la solución dada es correcta
        if(m_nuevoTablero.TableroCorrecto())
            jLabel1.setText("¡CORRECTO!");
        else
            jLabel1.setText("¡INCORRECTO!");
    }//GEN-LAST:event_jButFCActionPerformed

       /**
     * Se ejecuta cuando se pulsa la opción del Menú, Cargar Sudoku
     * @param evt
     */
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:

        //Para abrir el diálogo para seleccionar el fichero a cargar
        JFileChooser jfile = new JFileChooser();
        int ret = jfile.showOpenDialog(Interfaz.this);

        //Si se ha seleccionado un fichero
        if(jfile.getSelectedFile()!=null)
        {
            //Llama a la función para cargar el sudoku
            m_nuevoTablero.setFichero(jfile.getSelectedFile().getAbsoluteFile());
            m_nuevoTablero.CargarTablero();
            repaint();
            //Indica que hay un sudoku cargado
            sudoku = true;
        }

        jLabel1.setText("");
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /**
     * Captura el evento cuando se hace clic para seleccionar una casilla
     * @param evt
     */
    private void jPanelTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelTabMouseClicked
        // TODO add your handling code here:
        int anchoCasilla,altoCasilla;

        //Calcula el tamaño de cada casilla
        anchoCasilla = jPanelTab.getSize().width/9;
        altoCasilla = jPanelTab.getSize().height/9;

        //Calcula en qué casilla se ha hecho clic con el ratón
        columna = (int) ((evt.getX())/anchoCasilla);
        fila = (int) ((evt.getY())/altoCasilla);

        //Indica que hay una casilla seleccionada
        seleccion = true;
        repaint();

    }//GEN-LAST:event_jPanelTabMouseClicked

    /**
     * Captura el evento cuando se hace clic para seleccionar un número
     * @param evt
     */
    private void jPanelNumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelNumMouseClicked
        // TODO add your handling code here:
        int anchoCasilla,altoCasilla;
        int i, j;
        int valor;

        if(seleccion)
        {
            //Calcula el tamaño de cada casilla
            anchoCasilla = jPanelNum.getSize().width/3;
            altoCasilla = jPanelNum.getSize().height/3;

            //Calcula en qué casilla se ha hecho clic con el ratón
            j = (int) ((evt.getX())/anchoCasilla);
            i = (int) ((evt.getY())/altoCasilla);

            //Calcula el número que hay en esa casilla
            if(i<2)
                valor = (i+1)*(i+1) + j;
            else
                valor = 7 + j;

            //Introduce en el sudoku, en la casilla seleccionada, ese número
            m_nuevoTablero.setCasilla(valor, fila, columna);
            //Indica que ya no hay ninguna casilla seleccionada
            seleccion = false;
            repaint();
        }

    }//GEN-LAST:event_jPanelNumMouseClicked

    /**
     * Cuando se pulsa la opción del Menú BorrarSudoku
     * @param evt
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        m_nuevoTablero.LimpiarTablero();
        jLabel1.setText("");
        repaint();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * Para borrar una casilla. Si se pulsa al botón para borrar una casilla
     * @param evt
     */
    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        //Si hay una casilla seleccionada pone su valor a 0 (vacía)
         if(seleccion)
        {
            m_nuevoTablero.setCasilla(0, fila, columna);
            seleccion = false;
            repaint();
        }
    }//GEN-LAST:event_jPanel1MouseClicked

    /**
     * Se ejecuta al pulsar el botón Comprobar. Comprueba si el sudoku está solucionado correctamente
     * @param evt
     */
    private void jButBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButBackActionPerformed
        // TODO add your handling code here:

        if(m_nuevoTablero.TableroCorrecto())
            jLabel1.setText("¡CORRECTO!");
        else
            jLabel1.setText("¡INCORRECTO!");
    }//GEN-LAST:event_jButBackActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        //Llama a la función ejecutarBC de la clase Jugador
        jugador.ejecutarAC(m_nuevoTablero);
        repaint();

        //Comprueba si la solución dada es correcta
        if(m_nuevoTablero.TableroCorrecto())
            jLabel1.setText("¡CORRECTO!");
        else
            jLabel1.setText("¡INCORRECTO!");
    }//GEN-LAST:event_jButton1ActionPerformed


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButBack;
    private javax.swing.JButton jButFC;
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelNum;
    private javax.swing.JPanel jPanelTab;
    private javax.swing.JPopupMenu jPopupMenu1;
    // End of variables declaration//GEN-END:variables

     //Dibuja el tablero de juego.
    @Override
    @SuppressWarnings("static-access")
    public void paint(Graphics g)
    {
        String numero;
        int num;

         //Como estamos sobreescribiendo la función llamamos a la función padre.
        super.paint(g);
        g = jPanelTab.getGraphics();

         /*************************************************
          * Dibuja el tablero del Sudoku
          ************************************************/
        g.setColor(Color.BLACK);

        //Dibuja las líneas del tablero
        for(int i = 0; i <= 9; i++)
        {
            //Dibuja las líneas verticales
            g.drawLine(i*35, 0, i*35, 315);
            if( i%3 == 0)
                g.drawLine(i*35-1, 0, i*35-1, 315);


            //Dibuja las líneas horizontales
            g.drawLine(0, i*35, 315, i*35);
            if( i%3 == 0)
                g.drawLine(0, i*35-1, 315, i*35-1);

        }

        //Si se ha seleccionado alguna casilla, tiene que dibujar la casilla que se ha seleccionado
        //enmarcada en un recuadro rojo
        if(seleccion)
        {
            g.setColor(Color.RED);

            g.drawLine(columna*35, fila*35, (columna+1)*35, fila*35);
            g.drawLine(columna*35, fila*35, columna*35, (fila+1)*35);
            g.drawLine(columna*35, (fila+1)*35, (columna+1)*35, (fila+1)*35);
            g.drawLine((columna+1)*35, fila*35, (columna+1)*35, (fila+1)*35);

            //Para hacer la línea más gruesa
            g.drawLine(columna*35, fila*35-1, (columna+1)*35, fila*35-1);
            g.drawLine(columna*35-1, fila*35, columna*35-1, (fila+1)*35);
            g.drawLine(columna*35, (fila+1)*35-1, (columna+1)*35, (fila+1)*35-1);
            g.drawLine((columna+1)*35-1, fila*35, (columna+1)*35-1, (fila+1)*35);

        }


        //Dibuja los números del tablero
        //Define la fuente y su tamaño
        Font fuente = new Font("SansSerif", Font.BOLD, 30);
	g.setColor(Color.DARK_GRAY);
	g.setFont(fuente);

        //Dibuja todos los números
        for(int i = 0; i < 9; i++)
            for(int j = 0; j < 9; j++)
            {
                if(m_nuevoTablero.getCasilla(i, j)!=0)
                {
                    numero = ""+m_nuevoTablero.getCasilla(i, j);
                    g.drawString(numero, j*35+5, (i+1)*34);
                }
                
            }

        /***********************************************************
         * Dibuja el panel de los números
         **********************************************************/
        g = jPanelNum.getGraphics();

        for(int i = 1; i <= 2; i++)
        {
            //Dibuja las líneas verticales
            g.drawLine(i*35, 0, i*35, 105);

            //Dibuja las líneas horizontales
            g.drawLine(0, i*35, 105, i*35);
        }

        num = 1;
	g.setColor(Color.DARK_GRAY);
	g.setFont(fuente);
        //Dibuja los números en el panel de los números
        for(int i = 0; i < 3; i++)
            for(int j = 0; j < 3; j++)
            {
                    numero = ""+num;
                    g.drawString(numero, j*35+6, (i+1)*33);
                    num++;
            }
    }
}
